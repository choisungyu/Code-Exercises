

/* 

Challenge - under_score to camelCase

Write a function to convert a variable name from under_score format to camelCase.
Make sure you support an unlimited number of underscores in the input!
*/

// Examples:

// underToCamel("first_name"); // should return firstName
// underToCamel("income_tax"); // should return incomeTax

// Write Code Below

function underToCamel(str) {
	var newString = "";
	for (var i = 0; i < str.length; i++) {
		if (str[i] === "_") {
			i = i;
			console.log(newString);
		}else if (str[i-1] === "_") {
			newString += str[i].toUpperCase();
		}else{
			newString += str[i];
			console.log(newString);
		}
	}
	return newString;
}

underToCamel("first__name___fgh_rryt");


--------------------------------------------------------------------------------------------------------------------------------------

Challenge - "pop, push, shift, unshift"

*/

// STEP 1: Create an array and assign it to a variable.

var array1 = [1,2,3,4,5];

// STEP 2: Use the `push` method to add 5 values into your Array

array1.push(6,7,8,9,10);

array1;
// STEP 3: Use the `unshift` method to add 5 values to the front of your Array.

array1.unshift(-4,-3,-2,-1,0);

array1;

// STEP 4: Use the `pop` method to remove 2 values from the back of your Array.


array1.pop();
array1.pop();

array1;


// STEP 5: Use the "shift" method to remove 2 values from the front of your Array.

array1.shift();
array1.shift();
array1;

--------------------------------------------------------------------------------------------------------------------------------------

Description:

Very simple, given a number, find its opposite.

Examples:

1: -1
14: -14
-34: 34
But can you do it in 1 line of code and without any conditionals?

function opposite(number) {
    return number * (-1);
}


--------------------------------------------------------------------------------------------------------------------------------------

Description:

Your friend has been out shopping for puppies (what a time to be alive!)... He arrives back with multiple dogs, and you simply do not know how to respond!

By repairing the function provided, you will find out exactly how you should respond, depending on the number of dogs he has.

The number of dogs will always be a number and there will always be at least 1 dog.



function howManyDalmatians(number) {
  
  var dogs = ["Hardly any", "More than a handful!", "Woah that's a lot of dogs!", "101 DALMATIANS!!!"];
  
  var respond = number <= 10 ? dogs[0] : number <= 50 ? dogs[1] : number > 100 && number < 102 ? dogs[3]: dogs[2]
  
return respond
}

--------------------------------------------------------------------------------------------------------------------------------------

Description:

Some new animals have arrived at the zoo. The zoo keeper is concerned that perhaps the animals do not have the right tails. To help her, you must correct the broken function to make sure that the second argument (tail), is the same as the last letter of the first argument (body) - otherwise the tail wouldn't fit!

If the tail is right return true, else return false.

The arguments will always be strings, and normal letters.

function correctTail(body, tail) {
  
  var sub = body.substring(body.length-1);
  
  if (sub === tail.substring(0,1)) {
    return true;
  }else {
    return false;
  }
}

--------------------------------------------------------------------------------------------------------------------------------------
Description:

It's bonus time in the big city! The fatcats are rubbing their paws in anticipation... but who is going to make the most money?

Build a function that takes in two arguments (salary, bonus). Salary will be an integer, and bonus a boolean.

If bonus is true, the salary should be multiplied by 10. If bonus is false, the fatcat did not make enough money and must receive only his stated salary.

Return the total figure the individual will receive as a string prefixed with 'Â£' (JS and Java) or '$' (Ruby and Python).


function bonusTime(salary, bonus) {
  if (bonus === true) {
    salary = salary * 10;
    return '\u00A3' + salary;
  } else {
    return '\u00A3' + salary;
  }  
}

--------------------------------------------------------------------------------------------------------------------------------------

Description:

Be Concise I - The Ternary Operator

You are given a function describeAge that takes a parameter age (which will always be a positive integer) and does the following:

If the age is 12 or lower, it return "You're a(n) kid"
If the age is anything between 13 and 17 (inclusive), it return "You're a(n) teenager"
If the age is anything between 18 and 64 (inclusive), it return "You're a(n) adult"
If the age is 65 or above, it return "You're a(n) elderly"
Your task is to shorten the code as much as possible. Note that submitting the given code will not work because there is a character limit of 137.

I'll give you a few hints:

The title itself is a hint - if you're not sure what to do, always research any terminology in this description that you have not heard of!
Don't you think the whole "You're a(n) <insert_something_here>" is very repetitive? ;) Perhaps we can shorten it?
Whatever you do, do not change what the function does. Good luck :)


var i = "You're a(n) "
function describeAge(a) {
  return a < 13 ? i + 'kid': a < 18? i + 'teenager': a < 65 ? i + 'adult': i + 'elderly';
}


--------------------------------------------------------------------------------------------------------------------------------------
Description:

Object debugging

While making a zork-type game, you create an object of rooms. Unfortunately, the game is not working. Find all of the errors in the rooms object to get your game working again.
Fundamentals

var rooms = {
  first: {
    description: 'This is the first room',
    items: {
      chair: 'The old chair looks comfortable',
      lamp: 'This lamp looks ancient'
    }
  },
  second: {
    description: 'This is the second room',
    items: {
      couch: 'This couch looks like it would hurt your back',
      table: 'On the table there is an unopened bottle of water'
    }
  }
}


--------------------------------------------------------------------------------------------------------------------------------------
Palindrome Challenge

Have the function **palindrome(str)** take the str parameter being passed, and return the boolean `true` if the argument is a palindrome (meaning that the string is the same forward as it is backward).  Otherwise, return the boolean `false`. 

Punctuation and numbers will not be part of the string.


- INPUT: palindrome("racecar");
- OUTPUT: true


- INPUT: palindrome("animal");
- OUTPUT: false


*/

function palindrome(str) {
	var string1 = "";
	for (var i = (str.length - 1); i >= 0; i--) {
		string1 += str[i];
	}
	if (string1 === str) {
		return true;
	}else{
		return false;
	}
}

palindrome("racecar");
palindrome("animal");

--------------------------------------------------------------------------------------------------------------------------------------
The Array Hotel - Instructions

In this exercise, we'll be using an array to manage the occupancy
of a hotel called The Array Hotel.

Each room in the hotel will be represented with a "vacant" 
or "occupied" string in the array. The index of the element
is the room number. For example, for a hotel with an 
occupancy array of ["occupied", "vacant", "occupied", "vacant"],
we can determine that Rooms 0 and 2 are occupied 
and Rooms 1 and 3 are free.

Your job is to write a function called findVacantRooms 
to help the owner of the hotel find which rooms are 
vacant. return an array of the room numbers that are vacant.

If all rooms are occupied, return "No Vacancy"; 

- INPUT: findVacantRooms(["occupied", "vacant", "occupied", "vacant"]));
- OUTPUT: [1,3]

- INPUT: findVacantRooms(["occupied", "occupied", "occupied"]));
- OUTPUT: [];

Write Code Below
**************************/

function findVacantRooms(arr) {
	var arr1 = [];
	var vacancy = 0;
	for (var i = 0; i < arr.length ; i++) {
		if (arr[i] === "occupied") {
			i = i;
		} else {
			vacancy += 1;
			arr1.push(i); 
		}
	}
	return arr1;
}

findVacantRooms(["occupied", "occupied", "occupied"]);

--------------------------------------------------------------------------------------------------------------------------------------
The Array Hotel - Part 2 - Instructions

Assume now that instead of just "vacant" and 
"occupied", the occupancy array instead has the 
price of the room listed for the vacant rooms. 
For example, an example occupancy array could be 
as follows: [112, "occupied", 150, 175, "occupied"]

This would mean that Rooms 0, 2 and 3 are available
for stay at prices $112, $150 and $175 for the 
night. Make a function to help someone find the 
cheapest available room in the hotel. Return the 
room number and it's price in an array.

**************************/


function findCheapestVacantRoom(arr) {
	var arr1 = [];
	var room = 0;
	var price = 0;
	for (var i = 0; i < arr.length ; i++) {
		if (arr[i] === "occupied") {
			i = i;
		} else {
			if( price === 0 || price > arr[i]){
			price = arr[i];
			room = i;
			}
		}
	}
	if (price === 0) {
		return arr1;
	}else{
		arr1.push(room);
		arr1.push(price);
		return arr1;
	}
}

findCheapestVacantRoom([112, "occupied", 150, 175, "occupied"]);
--------------------------------------------------------------------------------------------------------------------------------------
// Steve and Josh are bored and want to play something. They don't want to 
// think too much, so they come up with a really simple game. Write a 
// function called `fullstackJack` and figure out who is going to win.

// FullstackJack Rules:

// - Each player is dealt the same number of cards
// - They flip the card at the top of the deck
// - The card with the highest value wins the round and the winning player 
// receives a point. The two cards used are discarded.
// - The players continue playing until there are no remaining cards
// - The player with the most points at the end wins

// #### Example

// Representing Cards: A players hand is stored in an array. Each index is a 
// card value.  The card rank is as follows (from lowest to highest):
// `'2','3','4','5','6','7','8','9','T','J','Q','K','A'`.  Hands are 
// passed to the fullstackJack functions as arguments, see the examples below.



// // player1Hand = ['A', '7', '8'];
// // player2Hand = ['K', '5', '9'];
// fullstackJack(['A', '7', '8'], ['K', '5', '9']);
// // --> returns "Player 1 wins 2 to 1!"


// fullstackJack(['K', 'Q', 'J'], ['Q', 'K', 'J'])
// // --> returns  "Tie!"

function fullstackJack(p1arr, p2arr){
	var cards = "23456789TJQKA";
	var p1 = [];
	var p2 = [];
	var p2count= 0;
	var p1count= 0;
	for(var i = 0; i < p1arr.length ; i++) {
		for (var j = 0 ; j < cards.length ; j++) {
			if(p1arr[i] === cards[j]) {
				p1.push(j);
			} 
		}
		for (var x = 0 ; x < cards.length ; x++) {
			if(p2arr[i] === cards[x]) {
				p2.push(x);
			}
		}
	}
	for( var count = 0; count < p1arr.length; count++) {
		if(p1[count] > p2[count]) {
			p1count +=1;
		} else if (p1[count] < p2[count]) {
			p2count +=1;
		} else {
			p1count += 0;
			p2count += 0;
		}
	}
	
	if (p1count > p2count) {
		return "Player 1 wins " + p1count + " to " + p2count + "!";
	} else if (p1count < p2count) {
		return "Player 2 wins " + p2count + " to " + p1count + "!";
	} else {
		return "Tie!";
	}

}

fullstackJack(['A', '7', '8', '2' , '2'], ['K', '5', '9','6','9']);

--------------------------------------------------------------------------------------------------------------------------------------

Rotate Challenge - 


Rotate an array to the right by a certain number of "steps". 

For example, the array to rotate is: [1,2,3,4,5,6,7] and 
will be rotated 3 "steps".  The final array will look like: [5,6,7,1,2,3,4].  

Notice the position of each index is shifted to the right by 3 places.

*/

function rotate(arr,steps){
    var arr1 = arr;
    for (var i = 0; i < steps; i++) {
    var popped = arr1.pop();
    arr1.unshift(popped);
    }
    return arr1;
}


 rotate([11,15,28,9,10], 0)
 
 --------------------------------------------------------------------------------------------------------------------------------------
 
 Prime - Challenge

The function prime(num) accepts a number argument and returns the boolean `true` if the number is a prime number otherwise it returns return `false`. 

<br>

####Examples:

```js
- INPUT: prime(5);
- OUTPUT: true


- INPUT: prime(10);
- OUTPUT: false
```
*/

// Write Code Below

function prime(num) {
	var count = 0;
	for (var i = 1 ; i <= num ; i += 1 ) {
		if (num % i === 0) {
			count += 1;
		}
	}
	if ( count === 2) {
		return true;
	} else {
		return false;
	}
}

prime(85451);
 
