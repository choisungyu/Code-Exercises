Description:

Coding 3min: Bug in Apple

This is the simple version of Shortest Code series. If you need some challenges, please try the challenge version.

Task:

Find out "B"(Bug) in a lot of "A"(Apple).

There will always be one bug in apple, not need to consider the situation that without bug or more than one bugs.

input: string Array apple

output: Location of "B", [x,y]

function sc(apple){
  var location = [];
  for ( var i = 0; i < apple.length ; i++) {
    for ( var j = 0; j < apple[i].length ; j++) {
      if (apple[i][j] === "B") {
        location.push(i);
        location.push(j);
      }
     }
  }
  return location;
}

----------------------------------------------------------------------------------------------------------------------------------------
/*Using the JavaScript language, have the function CountingMinutesI(str) take the str parameter being passed which will be two times 
(each properly formatted with a colon and am or pm) separated by a hyphen and return the total number of minutes between the two times.
The time will be in a 12 hour clock format. For example: if str is 9:00am-10:00am then the output should be 60. If str is 1:00pm-11:00am 
the output should be 1320.
*/


function CountingMinutesI(str) {
	var time1 = 0;
	var time2 = 0;
	//convert string to array. replace ":" and "-" with space and add space to "pm" and "am" 
	var newStr = ((str.replace(/(:|-)/gi, " ").replace("pm", " pm")).replace("am", " am"));
	var newArr = newStr.split(" ");
	
	//add time in minutes to compare the time
	time1 += (parseInt(newArr[0])*60) + parseInt(newArr[1]);
	time2 += (parseInt(newArr[3])*60) + parseInt(newArr[4]);
	
	// 12 Hours = 720 Min - adjust if the time is between AM to PM or over 24hrs
	if((newArr[2] === "pm" && newArr[5] === "am") || (newArr[2] === "am" && newArr[5] === "pm")) {
		time2 += 720  ;
	} else if (time2 < time1 ){
		time2 += 720 + 720;
	}

	return time2 - time1;
}



CountingMinutesI("1:23am-1:08am");
----------------------------------------------------------------------------------------------------------------------------------------
/*Using the JavaScript language, have the function HammingDistance(strArr) take the array of strings stored in strArr, which will only 
contain two strings of equal length and return the Hamming distance between them. The Hamming distance is the number of positions where 
the corresponding characters are different. For example: if strArr is ["coder", "codec"] then your program should return 1. The string 
will always be of equal length and will only contain lowercase characters from the alphabet and numbers.
*/


function HammingDistance(strArr) { 
	var str1 = strArr[0].toString();
	var str2 = strArr[1].toString();
	counter = 0;
	
	for(var i = 0; i < str1.length; i++) {
		if(str1[i] !== str2[i]) {
			counter++;
		}
	}
	console.log(str1);
	console.log(str2);
	return counter;
}

HammingDistance(["helloworld", "worldhello"]);

----------------------------------------------------------------------------------------------------------------------------------------
/*
Using the JavaScript language, have the function BitwiseOne(strArr) take the array of strings stored in strArr, which will only contain two 
strings of equal length that represent binary numbers, and return a final binary string that performed the bitwise OR operation on both strings.
A bitwise OR operation places a 0 in the new string where there are zeroes in both binary strings, otherwise it places a 1 in that spot. 
For example: if strArr is ["1001", "0100"] then your program should return the string "1101" 
*/

function BitwiseOne(strArr) { 
	var arrAnswer = "";
	for (var i = 0; i < strArr[0].length ; i++) {
		if (strArr[0][i] === strArr[1][i] && strArr[0][i] === "0"){
			arrAnswer += "0";
		} else {
			arrAnswer += "1";
		}
	}
	return arrAnswer;
}

BitwiseOne(["1001","0100"]);
----------------------------------------------------------------------------------------------------------------------------------------
/*Using the JavaScript language, have the function PalindromeTwo(str) take the str parameter being passed and return the string true if 
the parameter is a palindrome, (the string is the same forward as it is backward) otherwise return the string false. The parameter entered 
may have punctuation and symbols but they should not affect whether the string is in fact a palindrome. For example: "Anne, I vote more 
cars race Rome-to-Vienna" should return true. 
*/

function PalindromeTwo(str) {
	var newStr = str.match(/([a-zA-Z])/g).join("").toLowerCase();
	var palTest = "";
	console.log(newStr);
	for (var i = newStr.length-1; i >= 0; i--) {
		palTest += newStr[i];
	}
	console.log(palTest);
	if (newStr === palTest) {
		return "true";
	}else{
		return "false";
	}
}

//Learn basices of regular expression !!!
PalindromeTwo("Anne, I vote more cars race Rome-to-Vienna");
----------------------------------------------------------------------------------------------------------------------------------------

//sorting object 
//a.name sort by name, a.value sorty by value

var items = [
  { name: 'Edward', value: 21 },
  { name: 'Sharpe', value: 37 },
  { name: 'And', value: 45 },
  { name: 'The', value: -12 },
  { name: 'Magnetic' },
  { name: 'Zeros', value: 37 }
];
items.sort(function (a, b) {
  if (a.name.length > b.name.length) {
    return 1;
  }
  if (a.name.length < b.name.length) {
    return -1;
  }
  // a must be equal to b
  return 0;
});

----------------------------------------------------------------------------------------------------------------------------------------

/*Implement the function longest(array,n) where you will be given an array of strings and then return the nth longest string in that array. 
e.g. arr = ['Hello','World','Codewars','Katas'] n = 3; should return 'World' because 'Codewars' length = 8 , 'Hello' length = 5, so that is 
the 2nd longest word and then 'World' (although also word length of 5, 'World' is after 'Hello' in the array). When words have the same lengths, 
treat them in the order in which they exist in the array. Array will never be empty and n > 0 always.
*/

function longest(arr, n) {
	//add order counter	
	var arr2 = [];
	for(var i = 0; i < arr.length; i++) {
		arr2.push([arr[i] , i ]);
	}

	//sort array, first by length then by order of apperance
	arr2.sort(function(a,b) {
		if ( a[0].length > b[0].length){
			return -1;
		} 
		if (a[0].length < b[0].length) {
			return 1;
		}else{
			if (a[1] > b[1]) {
				return 1;
			}
			if (a[1] < b[1]) {
				return -1;
			}else{
				return 0;
			}
		}
	});
	
	// return nth number
	return arr2[n-1][0] ;
}


console.log(longest(['Hello','World','Codewars','Katas'],3));

----------------------------------------------------------------------------------------------------------------------------------------
/*Help Suzuki rake his garden!

The monastery has a magnificent Zen garden made of white gravel and rocks and it is raked diligently everyday by the monks. Suzuki having a
keen eye is always on the lookout for anything creeping into the garden that must be removed during the daily raking such as insects or moss.

You will be given a string representing the garden such as:

garden = 'gravel gravel gravel gravel gravel gravel gravel gravel gravel rock slug ant gravel gravel snail rock gravel gravel gravel gravel 
gravel gravel gravel slug gravel ant gravel gravel gravel gravel rock slug gravel gravel gravel gravel gravel snail gravel gravel rock gravel
snail slug gravel gravel spider gravel gravel gravel gravel gravel gravel gravel gravel moss gravel gravel gravel snail gravel gravel gravel 
ant gravel gravel moss gravel gravel gravel gravel snail gravel gravel gravel gravel slug gravel rock gravel gravel rock gravel gravel gravel 
gravel snail gravel gravel rock gravel gravel gravel gravel gravel spider gravel rock gravel gravel'

Rake out any items that are not a rock or gravel and replace them with gravel such that:

garden = 'slug spider rock gravel gravel gravel gravel gravel gravel gravel'
Returns a string with all items except a rock or gravel replaced with gravel:

garden = 'gravel gravel rock gravel gravel gravel gravel gravel gravel gravel'
*/

function rakeGarden(garden) {
	var gardenRaked = garden.split(" ");
	
	for ( var i = 0; i < gardenRaked.length; i++ ){
		if (gardenRaked[i] !== "rock") {
			gardenRaked[i] = "gravel";
		}
	}
	return gardenRaked.join(" ");
}

----------------------------------------------------------------------------------------------------------------------------------------

/*Help Suzuki count his vegetables....

Suzuki is the master monk of his monastery so it is up to him to ensure the kitchen is operating at full capacity to feed his students and 
the villagers that come for lunch on a daily basis.

This week there was a problem with his deliveries and all the vegetables became mixed up. There are two important aspects of cooking in his 
kitchen, it must be done in harmony and nothing can be wasted. Since the monks are a record keeping people the first order of business is to 
sort the mixed up vegetables and then count them to ensure there is enough to feed all the students and villagers.

You will be given a string with the following vegetables:

"cabbage", "carrot", "celery", "cucumber", "mushroom", "onion", "pepper", "potato", "tofu", "turnip"
Return a list of tuples with the count of each vegetable in descending order. If there are any non vegetables mixed in discard them. If the 
count of two vegetables is the same sort in descending alphabetical order.

(119, "pepper"),
(114, "carrot"),
(113, "turnip"),
(102, "onion"),
(101, "tofu"),
(100, "cabbage"),
(93, "mushroom"),
(90, "cucumber"),
(88, "potato"),
(80, "celery")
*/

function countVegetables(string){
	var vegetables = ["cabbage", "carrot", "celery", "cucumber", "mushroom", "onion", "pepper", "potato", "tofu", "turnip"];
	var obj = {};
	var arr = [];

	// create objects and add the vegetables that appear in string
	for( var i = 0; i<vegetables.length; i++) {
		var currentVeg = new RegExp(vegetables[i],"gi");
		if (obj[vegetables[i]] === undefined) {

			//check if vegetable is in the string and add the total occurence
			// match returns an array, legnth of array is the number of matches in the string
			if (string.match(currentVeg) !== null && (string.match(currentVeg).length) > 0) {
				obj[vegetables[i]] = (string.match(currentVeg).length);  
			}
		}
	}

	// move object to array
	for (var veg in obj) {
		arr.push([obj[veg],veg]);
	}

	//sort array to desired order
	arr.sort(function (a,b) {	//1st sort by number index 0
		if(a[0] > b[0]) {
			return -1;
		}
		if(a[0] < b[0]) {
			return 1;
		}else {
			if (a[1] > b[1]) { //2nd sort by alphabetical 
				return -1;
			}else if (a[1] < b[1]) {
				return 1;
			}else{
				return 0;
			}
		}
	});

	return arr;
}

countVegetables("cucumber tofu");


---------------------------------------------------------------------------------------------------------------------------------------
Description:

Input: Array of elements

["h","o","l","a"]

Output: String with comma delimited elements of the array in th same order.

"h,o,l,a"

function printArray(array){
  //show me the code!
  var text = "";
  for (var i = 0; i < array.length-1 ; i++) {
    text += array[i] + ",";
  }
  text += array[array.length-1];
  return text;
}


---------------------------------------------------------------------------------------------------------------------------------------
Description:

You can print your name on a billboard ad. Find out how much it will cost you. Each letter has a default price of £30, but that can be different
if you are given 2 parameters instead of 1.

You can not use multiplier "*" operator.

If your name would be Jeong-Ho Aristotelis, ad would cost £600. 20 leters * 30 = 600 (Space counts as a letter).

function billboard(name, price = 30){
  var adPrice = 0;
  for ( var i = 1; i <= name.length ; i++) {
    adPrice += price;
  }
  return adPrice;
} 
---------------------------------------------------------------------------------------------------------------------------------------
/*
Using the JavaScript language, have the function Superincreasing(arr) take the array of numbers stored in arr and determine if the array forms
a superincreasing sequence where each element in the array is greater than the sum of all previous elements. The array will only consist of 
positive integers. For example: if arr is [1, 3, 6, 13, 54] then your program should return the string "true" because it forms a superincreasing
sequence. If a superincreasing sequence isn't formed, then your program should return the string "false" 
*/

function Superincreasing(arr) { 
	var counter = 0;
	for ( var i = 0; i < arr.length-1; i++) {
		counter += arr[i];
		if (counter < arr[i+1] ) {
			continue;
		} else if (counter >= arr[i+1]) {
			return "false";
		}
	}
	console.log(counter);
	return "true";
}


Superincreasing([0,0,0,47,100]);
---------------------------------------------------------------------------------------------------------------------------------------
