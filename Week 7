Description:

You'll be given a string, and have to return the total of all the unicode characters as an int. Should be able to handle any 
characters sent at it.

examples:

uniTotal("a") == 97 uniTotal("aaa") == 291

function uniTotal(str){
  var num = 0;
  if (str === undefined){
    return 0;
  } else {
    for (var i = 0;i <str.length;i++){
      num += str[i].charCodeAt(0);
    }
  }
  return num;
}

__________________________________________________________________________________________________________________________________________

Description:

We have the first value of a certain sequence, we will name it initVal. We define pattern list, patternL, an array that has the differences between contiguous terms of the sequence. E.g: patternL = [k1, k2, k3, k4]

The terms of the sequence will be such values that:

term1 = initVal
term2 - term1 = k1
term3 - term2 = k2
term4 - term3 = k3
term5 - term4 = k4
term6 - term5 = k1
term7 - term6 = k2
term8 - term7 = k3
term9 - term8 = k4
....  - ..... = ...
....  - ..... = ...
So the values of the differences between contiguous terms are cyclical and are repeated as the differences values of the pattern 
list stablishes.

Let's see an example with numbers:

initVal = 10
patternL = [2, 1, 3]
term1 = 10
term2 = 12
term3 = 13
term4 = 16
term5 = 18
term6 = 19
term7 = 22  # and so on...
We can easily obtain the next terms of the sequence following the values in the pattern list. We see that the sixth term of the 
sequence, 19, has the sum of its digits 10.

Make a function sumDig_nthTerm(), that receives three arguments in this order

sumDig_nthTerm(initVal, patternL, nthTerm(ordinal number of the term in the sequence))

This function will output the sum of the digits of the n-th term of the sequence.

Let's see some cases for this function:

sumDig_nthTerm(10, [2, 1, 3], 6) -----> 10 # because the sixth term is 19 sum of Dig = 1 + 9 = 10. The sequence up to the sixth-Term is: 10, 12, 13, 16, 18, 19

sumDig_nthTerm(10, [1, 2, 3], 15) ----> 10 # 37 is the 15-th term, and 3 + 7 = 10


function sumDigNthTerm(inVal, pattern, nTerm) {
  var sumCounter = inVal;
  var loopCounter = 0;
  var sumNumber = 0;
  
  for (var i = 0; loopCounter < nTerm -1; i++) {
    if (pattern[i] === undefined){
      i = 0;
    }
    sumCounter += pattern[i];
    loopCounter++;
  }
  var newArrayNum = sumCounter.toString();
  for (var k = 0; k < newArrayNum.length; k++) {
    sumNumber += parseInt(newArrayNum[k]);
  }
  return sumNumber;
}


__________________________________________________________________________________________________________________________________________
Description:

A grid is a perfect starting point for many games (Chess, battleships, Candy Crush!).

Making a digital chessboard I think is an interesting way of visualising how loops can work together.

Your task is to write a function that takes two integers rows and columns and returns a chessboard pattern as a two dimensional array.

So chessBoard(6,4) should return an array like this:

[
    ["O","X","O","X"],
    ["X","O","X","O"],
    ["O","X","O","X"],
    ["X","O","X","O"],
    ["O","X","O","X"],
    ["X","O","X","O"]
]
And chessBoard(3,7) should return this:

[
    ["O","X","O","X","O","X","O"],
    ["X","O","X","O","X","O","X"],
    ["O","X","O","X","O","X","O"]
]
The white spaces should be represented by an: 'O'

and the black an: 'X'

The first row should always start with a white space 'O'



function chessBoard(height,length) {
  var arrayRow;
  var arrayAns = [];
  
  for (var i = 0; i < height ; i++) {
    arrayRow = [];
    
    for (var j = 0; j < length; j++) {
      if((i+j) % 2 === 0) {
        arrayRow.push("O");
      }else {
        arrayRow.push("X");
      }
    }
    arrayAns.push(arrayRow);
  }
  return arrayAns;
}

__________________________________________________________________________________________________________________________________________

