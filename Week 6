/*Problem Description:

Input: Integer n
Output: String
Example:

a(4) prints as

   A   
  A A  
 A A A 
A     A
a(8) prints as

       A       
      A A      
     A   A     
    A     A    
   A A A A A   
  A         A  
 A           A 
A             A
a(12) prints as

           A           
          A A          
         A   A         
        A     A        
       A       A       
      A         A      
     A A A A A A A     
    A             A    
   A               A   
  A                 A  
 A                   A 
A                     A
Note:

Each line's length is 2n - 1
Each line should be concatenate by line break "\n"
If n is less than 4, it should return ""
If n is odd, a(n) = a(n - 1), eg a(5) == a(4); a(9) == a(8)


Solution :
Each line's length is 2n - 1, what's the correlation?

4
3  A   
2 A A  
1A A A        2 3  N/2+1 = Across
A     A


6
5    A     
4   A A
3  A   A
2 A A A A     3 4
1A       A
A         A


8
7      A       
6     A A      
5    A   A     
4   A     A    
3  A A A A A  4 5
2 A         A  
1A           A 
A             A


*/


function a(n){
	var drawA = [];
	var rowCounter = 0;

	if(n < 4){									//check if n is less than 4 or odd
		return "";
	} else if( n%2 !==0){
		n = n-1;
	}

	for (var i = n; i > 0; i--) {							// Create array to draw on
		for (var j =1 ; j < 2*n; j++) {
			drawA.push(" ");
		}
	drawA.push("\n");	
	}
	drawA.pop(); 									// remove last line break !find better way

	for( var index = 0; index < n; index++ ){
		var drawInLine = (rowCounter*(2*n));
		if( index === 0) {							// Draw first A
			drawA.splice(n-1,1, "A");
			rowCounter++;
		}else if (rowCounter === n/2){						      // Draw Middle Row
			for (var midRow = 0; midRow < n+1; midRow++){
				if(midRow % 2 === 0){
					drawA.splice((drawInLine+(n-(index+1)))+midRow,1, "A");
				}
			}
			rowCounter++;
		}else{										    // Draw every other row
			drawA.splice(drawInLine+(n-(index+1)),1, "A");
			drawA.splice(drawInLine+(n+(index-1)),1, "A");
			rowCounter++;
		}
	}
	return drawA.join("");
}

console.log(a(25));

-------------------------------------------------------------------------------------------------------------------------------------
/*Find the number of all palindrome substrings of the given strings.

Example

NPalindromes("abba") = 2.
There're two palindromes: "abba" and "bb".
NPalindromes("abcdc") = 1;
NPalindromes("ababa") = 4.
These substrings are: two "aba"s, "bab" and "ababa".
Note: substrings that contain only 1 character are not considered to be palindromes.

[input] string s

A string comprised of English letters and symbols.
1 ≤ s.length ≤ 1500.

[output] integer

The number of palindrome substrings.

*/

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Solution Too slow. 1500+ character string with few palindromes takes to long to parse!!!!!!!!!!!!!!!!!!!
/*
function NPalindromes(s) {
    var counter = 0;
	
	function reverse(w) {
		var newWord = "";
		for (var j = w.length-1; j >= 0; j--){
			newWord += w[j];
		}
		return newWord;
	}
	
    for(var i = 0; i < s.length-1 ; i++) {
        for(var k = s.length-i; k > 1; k--) {
			var text = s.substr(i,k);

            if(text === reverse(text)) {
                counter++;
            }
        }
    }
    return counter;
}

*/

//--------------------------------------------------(Solution v2) Javascript labels!!!

function NPalindromes(s) {
    var counter = 0;
	
    for(var i = 0; i < s.length-1 ; i++) {
        
      loop1:for(var k = s.length-i; k > 1; k--) {
			  var text = s.substr(i,k);

			    for (var x = 1; x < text.length-1 ; x++) {
				    if (text[x-1] !== text[text.length-x]) {
					  continue loop1;
				    }
			    }
        	if (text === text.split("").reverse().join("")) {
        		counter++;
        	}

      }
    }
    return counter;
}

var x = "ababaababaaba";
NPalindromes(x);

-------------------------------------------------------------------------------------------------------------------------------------
Description:

Given an integer n return 'odd' if the number of its divisors is odd. Otherwise return 'even'.

Examples:

All prime numbers have exactly two divisors (hence 'even')

For n=12 the divisors are [1,2,3,4,6,12] – 'even'

For n=4 the divisors are [1,2,4] – 'odd'


-------------------------------------------------------------------------------------------------------------------------------------
function oddity(n)
{
 var num = n;
 var count = 0
 
 for (i = 1; i <= Math.floor(Math.sqrt(num)); i += 1)
  if (num % i === 0) {
   count += 1;
   if (num / i !== i)
    count +=1;
  }
 if (count % 2 === 0){
   return "even";
 }else{
   return "odd"; 
 }
}
-------------------------------------------------------------------------------------------------------------------------------------
Description:

In a simple memory game (http://en.wikipedia.org/wiki/Concentration_(game)) we need an array containing tiles represented by integers in pairs.

Memory games basics

In the memory game, numbers are randomly placed face-down in a grid. Each turn, the player chooses a number to peek at, and then replace, face 
down. If they choose two of the same number in a row, those numbers are removed from the grid. The aim is to clear the board!

Your job is to produce an array of pairs of numbers, placed in a random spot in the array.

The array (and result) could look somthing like:

[3,1,2,1,3,2,4,4]
for an 8 tile memory game. (4 pairs). createTiles(8)

Your task is to implement the function createTiles(n) where n is the number of tiles. The function should return 
an array with the length n containing randomized, paired, integers starting with 1. Duplicate pairs are not allowed.

Special cases:

if n is odd or zero, an empty array should be returned



function createTiles(n){
  var arr = [];

  function getRand() {
    return Math.floor(Math.random() * n);
  }
  
  for(var i = 1 ; i <= n ; i++) {
      if( i > n/2){
        arr.push(i-n/2);
      }else{
        arr.push(i);
      }
  }
  
  for (var k = n; k > 0 ; k--) {
    var shuffle = arr.splice(getRand(),1);
    arr.splice(getRand(),0,parseInt(shuffle));
  }

if(n === 0 || n % 2 !== 0){
    return [];
  }else{
  return arr;
  }
}

-------------------------------------------------------------------------------------------------------------------------------------
Description:

Implement the function longest(array,n) where you will be given an array of strings and then return the nth longest string in that array. 
e.g. arr = ['Hello','World','Codewars','Katas'] n = 3; should return 'World' because 'Codewars' length = 8 , 'Hello' length = 5, so that is 
the 2nd longest word and then 'World' (although also word length of 5, 'World' is after 'Hello' in the array). When words have the same 
lengths, treat them in the order in which they exist in the array. Array will never be empty and n > 0 always.


function longest(arr, n) {

  var arr2 = [];
  for(var i = 0; i < arr.length; i++) {
    arr2.push([arr[i] , i ]);
  }

  arr2.sort(function(a,b) {
    if ( a[0].length > b[0].length){
      return -1;
    } 
    if (a[0].length < b[0].length) {
      return 1;
    }else{
      if (a[1] > b[1]) {
        return 1;
      }
      if (a[1] < b[1]) {
        return -1;
      }else{
        return 0;
      }
    }
  });
  

  return arr2[n-1][0] ;
}
-------------------------------------------------------------------------------------------------------------------------------------

Description:

Implement the function longest(array,n) where you will be given an array of strings and then return the nth longest string in that array. 
e.g. arr = ['Hello','World','Codewars','Katas'] n = 3; should return 'World' because 'Codewars' length = 8 , 'Hello' length = 5, so that is 
the 2nd longest word and then 'World' (although also word length of 5, 'World' is after 'Hello' in the array). When words have the same 
lengths, treat them in the order in which they exist in the array. Array will never be empty and n > 0 always.





